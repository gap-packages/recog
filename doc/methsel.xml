<!--

   This chapter covers our own method selection.

-->

<Chapter Label="methsel">
<Heading>Method selection</Heading>

The setup described in this chapter is intended for situations, in which
lots of different methods are available to fulfill a certain task, but
in which it is not possible in the beginning to decide, which one to use.
Therefore this setup regulates, rather than just which method to choose,
in which order the various methods are tried. The methods themselves
return whether they were successful and, if not, whether it is sensible
to try them again at a later stage.<P/>

The design is intentionally kept as simple as possible and at the same
time as versatile as possible, thereby providing a useful framework
for many situations as described above.<P/>

Note the differences to the &GAP; method selection, which is designed
with the idea in mind that it will be quite clear in most
situations, which one is <Q>the best</Q> method for a given set of
input data, and that we do not want to try different things. On the other
hand, the &GAP; method selection is quite complicated, which is to some
extend necessary to make sure, that lots of different information about
the objects in question can be used to really find the best method.<P/>

Our setup here in particular has to fulfill the requirement, that in the
end, with lots of methods installed, one still has to be able to have
an overview and to <Q>prove</Q>, that the whole system always does
the right thing.<P/>

<Section Label="whataremethods">
    <Heading>What are methods?</Heading>

Recognition methods lie in the filter <Ref Filt="IsRecogMethod"/> and can be
created via the function <Ref Func="RecogMethod"/>.

<#Include Label="IsRecogMethod">

<#Include Label="RecogMethod">

<#Include Label="BindRecogMethod">

<#Include Label="Stamp">
<#Include Label="Comment">

<#Include Label="CallRecogMethod">

</Section>


For administration in the method selection, a method is described by
a record with the following components bound:

<List>
<Mark><C>method</C></Mark>
<Item>holds the function itself.</Item>
<Mark><C>rank</C></Mark>
<Item>holds an integer used to sort the various methods. Higher numbers
    mean that the method is tried earlier. The numbering scheme is left
    to the user.
</Item>
<Mark><C>stamp</C></Mark>
<Item>holds a string value that uniquely describes the method. This is used
    for bookkeeping and to keep track of what has to be tried how often.
</Item>
<Mark><C>comment</C></Mark>
<Item>a string valued comment. This field is optional and can be left out.
</Item>
</List>

The different methods for a certain task are collected in so-called
<Q>method databases</Q>. A <E>method database</E> is just a list of records,
each describing a method in the format described above. During method selection,
the methods are tried in the order in which they are stored in the database.
Thus they should be stored in rank-descending order.<P/>

There is one convenience function to put a new method into a method database:

<#Include Label="AddMethod">
</Section>

<Section Label="howcalled">
    <Heading>How methods are called</Heading>

Whenever the method selection shall be used, one calls the following
function:

<#Include Label="CallMethods">
</Section>

<P/>

<!-- ############################################################ -->

</Chapter>
